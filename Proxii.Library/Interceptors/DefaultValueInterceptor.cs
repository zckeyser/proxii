using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using Castle.DynamicProxy;

namespace Proxii.Library.Interceptors
{
    /// <summary>
    /// injects default values in place of passed nulls
    /// 
    /// allows for objects to be constructed at runtime to be used for defaults,
    /// unlike optional parameters
    /// 
    /// if multiple defaults for the same arg name are added, takes the last one passed in
    /// this applies across both factory methods and values (adding a factory will remove an existing default value)
    /// </summary>
    public class DefaultValueInterceptor : IInterceptor
    {
        private readonly Dictionary<string, Func<object>> _factories;
        private readonly Dictionary<string, object> _values;

        public DefaultValueInterceptor()
        {
            _factories = new Dictionary<string, Func<object>>();
            _values = new Dictionary<string, object>();
        }

        /// <summary>
        /// when an argument with the given name is null, replaces it with the object generated by the given factory
        /// </summary>
        public void AddDefaultForArgument(string argName, Func<object> factory)
        {
            _factories[argName] = factory;

            if (_values.ContainsKey(argName))
                _values.Remove(argName);
        }

        /// <summary>
        /// when an argument with the given name is null, replaces it with the object generated by the given factory
        /// </summary>
        public void AddDefaultForArgument(string argName, object defaultValue)
        {
            _values[argName] = defaultValue;

            if (_factories.ContainsKey(argName))
                _factories.Remove(argName);
        }

        public void Intercept(IInvocation invocation)
        {
            var paramList = invocation.Method.GetParameters();

            for (var i = 0; i < paramList.Length; i++)
            {
                if (invocation.Arguments[i] == null)
                {
                    var param = paramList[i];

                    if (_values.ContainsKey(param.Name))
                        invocation.SetArgumentValue(i, _values[param.Name]);
                    else if (_factories.ContainsKey(param.Name))
                        invocation.SetArgumentValue(i, _factories[param.Name].Invoke());
                }
            }

            invocation.Proceed();
        }
    }
}
